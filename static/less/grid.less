@import 'variables.less';
.grid(@size-prefix, @number: 1) when (@number < (@colums + 1)){
  @gutter-width-var-name: "@{size-prefix}-gutter-width";

  .col-@{size-prefix}-@{number}{
    width: (100% / @colums * @number);
    padding-left: (@@gutter-width-var-name / 2);
    padding-right: (@@gutter-width-var-name / 2);
    float: left;
    position: relative;
  }
  .offset-@{size-prefix}-@{number}{
    margin-left: (100% / @colums * @number);;
  }

  .grid(@size-prefix, @number + 1);
}

.grid-gutter-fix(@for-size, @current-size, @number: 1) when (@number < (@colums + 1)){
  @gutter-width-var-name: "@{current-size}-gutter-width";

  .col-@{for-size}-@{number}{
    padding-left: (@@gutter-width-var-name / 2);
    padding-right: (@@gutter-width-var-name / 2);
  }
  .grid-gutter-fix(@for-size, @current-size, @number + 1);
}

.grid-system(@size-prefix){
  @container-width-var-name: "@{size-prefix}-container-width";
  @container-margin-var-name: "@{size-prefix}-container-margin";
  @gutter-width-var-name: "@{size-prefix}-gutter-width";

  .container{
    width: @@container-width-var-name;
    padding: 0 @@container-margin-var-name;
  }

  .row{
    margin: 0 (@@gutter-width-var-name / -2);
    min-height: 1px;
  }

  .grid(@size-prefix);

  .show-@{size-prefix} {
    display: block;
  }
  .hide-@{size-prefix} {
    display: none;
  }
  .pull-left-@{size-prefix} {
    float: left !important;
  }
  .pull-right-@{size-prefix} {
    float: right !important;
  }
  .margin-@{size-prefix} {
    margin: 0;
  }
  .np-@{size-prefix}{
    padding: 0 !important;
  }
  .p-@{size-prefix}{
    padding: 0 @@container-margin-var-name !important;
  }
}

.grid-system(~"xl");

@media (max-width: @lg-breakdown-width){
  .grid-system(~"lg");
  .grid-gutter-fix(~"xl",~"lg");
}

@media (max-width: @md-breakdown-width){
  .grid-system(~"md");
  .grid-gutter-fix(~"xl",~"md");
  .grid-gutter-fix(~"lg",~"md");
}

@media (max-width: @sm-breakdown-width){
  .grid-system(~"sm");
  .grid-gutter-fix(~"xl",~"sm");
  .grid-gutter-fix(~"lg",~"sm");
  .grid-gutter-fix(~"md",~"sm");
}
// @media (max-width: @xs-breakdown-width){
//   .grid-system(~"xs");
//   .grid-gutter-fix(~"xl",~"xs");
//   .grid-gutter-fix(~"lg",~"xs");
//   .grid-gutter-fix(~"md",~"xs");
//   .grid-gutter-fix(~"sm",~"xs");
// }

*,
*:before,
*:after {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

.container{
  margin: 0 auto;
  overflow: hidden;
}

.row:before,
.row:after {
  content: " ";
  display: table;
}
.row:after {
  clear: both;
}

.pull-left{
  float: left;
}
.pull-right{
  float: right;
}

.clearfix:before, .clearfix:after {
  content:" ";
  /* 1 */
  display: table;
  /* 2 */
}
.clearfix:after {
  clear: both;
}
/*
 * For IE 6/7 only
 * Include this rule to trigger hasLayout and contain floats.
 */
.clearfix {
  *zoom: 1;
}